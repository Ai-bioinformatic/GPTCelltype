p6
head(num_df)
str(num_df)
levels(num_df[,1])
numCell.mouse2
num_df = data.frame(Celltype = names(numCell.mouse2),
Number = numCell.mouse2,
stringsAsFactors = F)
str(num_df)
num_df[,1] = factor(num_df[,1],levels=numCell.mouse2)
numCell.mouse2 = numCell.mouse[hc.human$order]
str(numCell.mouse2)
num_df = data.frame(Celltype = names(numCell.mouse2),
Number = numCell.mouse2,
stringsAsFactors = F)
str(num_df)
num_df[,1] = factor(num_df[,1],levels=names(numCell.mouse2))
p6 <- ggplot(num_df,
aes(x = Celltype, y = Number, fill = 'grey20')) +
geom_bar(stat = "identity") +
labs(title = "Mouse: cell number", x = "Celltype", y = "Number") +
scale_fill_manual(values = techcolor)+
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
geom_abline(intercept = log10(1e2+1)/max(log10(rowSums(t2)+1)), slope = 0, color = orange[1], linetype = 'dashed') +
geom_abline(intercept = log10(1e3+1)/max(log10(rowSums(t2)+1)), slope = 0, color = orange[2], linetype = 'dashed') +
geom_abline(intercept = log10(1e4+1)/max(log10(rowSums(t2)+1)), slope = 0, color = orange[3], linetype = 'dashed') +
geom_abline(intercept = log10(1e5+1)/max(log10(rowSums(t2)+1)), slope = 0, color = orange[4], linetype = 'dashed')
p6
data_df.human <- as.data.frame(as.table(t.human[hc.human$order, ]))
colnames(data_df.human) <- c("Celltype", "Tissue", "Proportion")
data_df.human$Proportion <- data_df.human$Proportion * 100
p1 <- ggplot(data_df.human, aes(x = Celltype, y = Proportion, fill = Tissue)) +
geom_bar(stat = "identity") +
labs(title = "Human: tissue proportion", x = "", y = "Proportion") +
#scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_fill_manual(values = barcolor)+
theme_classic() +
theme(axis.text.x = element_blank(), legend.position = 'none')
tech.human <- as.data.frame(as.table(t.human.tech[hc.human$order, ]))
colnames(tech.human) <- c("Celltype", "Technology", "Proportion")
tech.human$Proportion <- tech.human$Proportion * 100
p2 <- ggplot(tech.human, aes(x = Celltype, y = Proportion, fill = Technology)) +
geom_bar(stat = "identity") +
labs(title = "Human: sequencing technology proportion", x = "", y = "Proportion") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_fill_manual(values = techcolor)+
theme_classic() +
theme(axis.text.x = element_blank())
num_df.human = data.frame(Celltype = names(numCell.human),
Number = numCell.human,
stringsAsFactors = T)
levels(num_df.human[,1]) = names(numCell.human[hc.human$order])
p3 <- ggplot(num_df.human,
aes(x = Celltype, y = Number, fill = 'grey20')) +
geom_bar(stat = "identity") +
labs(title = "Human: cell number", x = "", y = "Number") +
scale_fill_manual(values = techcolor)+
theme_classic() +
# theme(axis.text.x = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
geom_abline(intercept = log10(1e2+1)/max(log10(rowSums(t1)+1)), slope = 0, color = orange[1], linetype = 'dashed') +
geom_abline(intercept = log10(1e3+1)/max(log10(rowSums(t1)+1)), slope = 0, color = orange[2], linetype = 'dashed') +
geom_abline(intercept = log10(1e4+1)/max(log10(rowSums(t1)+1)), slope = 0, color = orange[3], linetype = 'dashed') +
geom_abline(intercept = log10(1e5+1)/max(log10(rowSums(t1)+1)), slope = 0, color = orange[4], linetype = 'dashed')
#####
data_df.mouse <- as.data.frame(as.table(t.mouse[hc.human$order, ]))
colnames(data_df.mouse) <- c("Celltype", "Tissue", "Proportion")
data_df.mouse$Proportion <- data_df.mouse$Proportion * 100
p4 <- ggplot(data_df.mouse, aes(x = Celltype, y = Proportion, fill = Tissue)) +
geom_bar(stat = "identity") +
labs(title = "Mouse: tissue proportion", x = "", y = "Proportion") +
#scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_fill_manual(values = barcolor)+
theme_classic() +
theme(axis.text.x = element_blank())
tech.mouse <- as.data.frame(as.table(t.mouse.tech[hc.human$order, ]))
colnames(tech.mouse) <- c("Celltype", "Technology", "Proportion")
tech.mouse$Proportion <- tech.mouse$Proportion * 100
p5 <- ggplot(tech.mouse, aes(x = Celltype, y = Proportion, fill = Technology)) +
geom_bar(stat = "identity") +
labs(title = "Mouse: sequencing techonology proportion", x = "", y = "Proportion") +
#scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_fill_manual(values = techcolor)+
theme_classic() +
theme(axis.text.x = element_blank(), legend.position = 'none')
####
numCell.mouse2 = numCell.mouse[hc.human$order]
str(numCell.mouse2)
num_df = data.frame(Celltype = names(numCell.mouse2),
Number = numCell.mouse2,
stringsAsFactors = F)
num_df[,1] = factor(num_df[,1],levels=names(numCell.mouse2))
p6 <- ggplot(num_df,
aes(x = Celltype, y = Number, fill = 'grey20')) +
geom_bar(stat = "identity") +
labs(title = "Mouse: cell number", x = "Celltype", y = "Number") +
scale_fill_manual(values = techcolor)+
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
geom_abline(intercept = log10(1e2+1)/max(log10(rowSums(t2)+1)), slope = 0, color = orange[1], linetype = 'dashed') +
geom_abline(intercept = log10(1e3+1)/max(log10(rowSums(t2)+1)), slope = 0, color = orange[2], linetype = 'dashed') +
geom_abline(intercept = log10(1e4+1)/max(log10(rowSums(t2)+1)), slope = 0, color = orange[3], linetype = 'dashed') +
geom_abline(intercept = log10(1e5+1)/max(log10(rowSums(t2)+1)), slope = 0, color = orange[4], linetype = 'dashed')
library(gridExtra)
library(egg)
pdf('/Users/wenpinhou/Dropbox/encode4/circlize/barplot_all.pdf',width=14,height=11)
#grid.arrange(p1,p2,p3,p4,p5,p6, ncol = 1)
p <- egg::ggarrange(p1,p2,p3,p4,p5,p6, ncol = 1)
grid::grid.draw(p)
dev.off()
num_df.human = data.frame(Celltype = names(numCell.human),
Number = numCell.human,
stringsAsFactors = T)
levels(num_df.human[,1]) = names(numCell.human[hc.human$order])
p3 <- ggplot(num_df.human,
aes(x = Celltype, y = Number, fill = 'grey20')) +
geom_bar(stat = "identity") +
labs(title = "Human: cell number", x = "", y = "Number") +
scale_fill_manual(values = techcolor)+
theme_classic() +
theme(axis.text.x = element_blank()) +
# theme(axis.text.x = element_text(angle = 90, hjust = 1))+
geom_abline(intercept = log10(1e2+1)/max(log10(rowSums(t1)+1)), slope = 0, color = orange[1], linetype = 'dashed') +
geom_abline(intercept = log10(1e3+1)/max(log10(rowSums(t1)+1)), slope = 0, color = orange[2], linetype = 'dashed') +
geom_abline(intercept = log10(1e4+1)/max(log10(rowSums(t1)+1)), slope = 0, color = orange[3], linetype = 'dashed') +
geom_abline(intercept = log10(1e5+1)/max(log10(rowSums(t1)+1)), slope = 0, color = orange[4], linetype = 'dashed')
pdf('/Users/wenpinhou/Dropbox/encode4/circlize/barplot_all.pdf',width=14,height=11)
#grid.arrange(p1,p2,p3,p4,p5,p6, ncol = 1)
p <- egg::ggarrange(p1,p2,p3,p4,p5,p6, ncol = 1)
grid::grid.draw(p)
dev.off()
dev.off()
library(openai)
input=list(gs1=c('CD4,CD3D'),gs2='CD14')
tissuename='human PBMC'
openai_key=NA
model = 'gpt-4'
class(input)=='list'
input <- sapply(input,paste,collapse=',')
input
cutnum <- ceiling(length(input)/30)
if (cutnum > 1) {
cid <- as.numeric(cut(1:length(input),cutnum))
} else {
cid <- rep(1,length(input))
}
!is.na(openai_key)
i = 1
id <- which(cid==i)
id
flag <- 0
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
names(res) <- names(input)[id]
id
names(input)
names(input)[id]
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
message
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))
message
names(message) <- names(input)[id]
names(input)[id]
paste(input[id],collapse = '\n')
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(input[id],collapse = '\n'))
message
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(input[id],collapse = '\n'))
},simplify = F)
allres
message = list(paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(input[id],collapse = '\n')))
message
names(input)[id]
names(message) = names(input)[id]
paste(input[id],collapse = '\n')
k <- create_chat_completion(
model = model,
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
)
k
res <- strsplit(k$choices[,'message.content'],'\n')[[1]]
res
message = list(paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(input[id],collapse = '\n')))
message
paste(names(input)[id], collapse = '\n')
names(message) = paste(names(input)[id], collapse = ', ')
message
input2=list(gs1=c('CD4,CD3D'),gs2='CD14')
input2=list(gs1=c('CD4,CD3D'),gs2='CD14')
input = rep(input2, 10)
input
input2=list(gs1=c('CD4,CD3D'),gs2='CD14')
input = rep(input2, 20)
names(input) = paste0('gs', 1:length(input))
input <- sapply(input,paste,collapse=',')
input
cutnum <- ceiling(length(input)/30)
cutnum
cid <- as.numeric(cut(1:length(input),cutnum))
cid
i
id <- which(cid==i)
id
message = list(paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(input[id],collapse = '\n')))
names(message) = paste(names(input)[id], collapse = ', ')
message
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
message = list(paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(input[id],collapse = '\n')))
names(message) = paste(names(input)[id], collapse = ', ')
},simplify = F)
allres
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
message = list(paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(input[id],collapse = '\n')))
names(message) = paste(names(input)[id], collapse = ', ')
message
},simplify = F)
allres
gptcelltype <- function(input, tissuename=NULL, openai_key, model='gpt-4', topgenenumber = 10) {
if (!is.na(openai_key)) Sys.setenv(OPENAI_API_KEY = openai_key)
if (class(input)=='list') {
input <- sapply(input,paste,collapse=',')
} else {
input <- tapply(input$gene,list(input$cluster),function(i) paste0(i[1:topgenenumber],collapse=','))
}
cutnum <- ceiling(length(input)/30)
if (cutnum > 1) {
cid <- as.numeric(cut(1:length(input),cutnum))
} else {
cid <- rep(1,length(input))
}
###
if (is.na(openai_key)){
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
message = list(paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(input[id],collapse = '\n')))
names(message) = paste(names(input)[id], collapse = ', ')
message
},simplify = F)
} else {
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
flag <- 0
while (flag == 0) {
k <- create_chat_completion(
model = model,
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
)
res <- strsplit(k$choices[,'message.content'],'\n')[[1]]
if (length(res)==length(id))
flag <- 1
}
names(res) <- names(input)[id]
res
},simplify = F)
unlist(allres)
}
}
input
gptcelltype(input=input, tissuename='human PBMC',openai_key=NA, model = 'gpt-4')
input
class(input)=='list'
input <- sapply(input,paste,collapse=',')
input
input2=list(gs1=c('CD4,CD3D'),gs2='CD14')
input = rep(input2, 20)
names(input) = paste0('gs', 1:length(input))
input
gptcelltype(input=input, tissuename='human PBMC',openai_key=NA, model = 'gpt-4')
input
unlist(input)
paste(unlist(input),collapse = '\n')
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n', paste(unlist(input),collapse = '\n'))
message
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types. Ouput each of the list element names and its celltype. \n', paste(unlist(input),collapse = '\n'))
message
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types. Ouput each of the list names and its celltype. \n', paste(unlist(input),collapse = '\n'))
message
unlist(input)
paste(names(input), unlist(input),collapse = '\n')
paste(names(input), ':',unlist(input),collapse = '\n')
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.  \n', paste(names(input), ':',unlist(input),collapse = '\n'))
message
paste0(names(input), ':',unlist(input),collapse = '\n ')
gptcelltype <- function(input, tissuename=NULL, openai_key, model='gpt-4', topgenenumber = 10) {
if (!is.na(openai_key)) Sys.setenv(OPENAI_API_KEY = openai_key)
if (class(input)=='list') {
input <- sapply(input,paste,collapse=',')
} else {
input <- tapply(input$gene,list(input$cluster),function(i) paste0(i[1:topgenenumber],collapse=','))
}
###
if (is.na(openai_key)){
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.  \n', paste0(names(input), ':',unlist(input),collapse = '\n '))
} else {
cutnum <- ceiling(length(input)/30)
if (cutnum > 1) {
cid <- as.numeric(cut(1:length(input),cutnum))
} else {
cid <- rep(1,length(input))
}
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
flag <- 0
while (flag == 0) {
k <- create_chat_completion(
model = model,
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
)
res <- strsplit(k$choices[,'message.content'],'\n')[[1]]
if (length(res)==length(id))
flag <- 1
}
names(res) <- names(input)[id]
res
},simplify = F)
unlist(allres)
}
}
input2=list(gs1=c('CD4,CD3D'),gs2='CD14')
input = rep(input2, 20)
names(input) = paste0('gs', 1:length(input))
gptcelltype(input=input, tissuename='human PBMC',openai_key=NA, model = 'gpt-4')
gptcelltype <- function(input, tissuename=NULL, openai_key, model='gpt-4', topgenenumber = 10) {
if (!is.na(openai_key)) Sys.setenv(OPENAI_API_KEY = openai_key)
if (class(input)=='list') {
input <- sapply(input,paste,collapse=',')
} else {
input <- tapply(input$gene,list(input$cluster),function(i) paste0(i[1:topgenenumber],collapse=','))
}
if (is.na(openai_key)){
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.  \n', paste0(names(input), ':',unlist(input),collapse = '\n '))
return(message)
} else {
cutnum <- ceiling(length(input)/30)
if (cutnum > 1) {
cid <- as.numeric(cut(1:length(input),cutnum))
} else {
cid <- rep(1,length(input))
}
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
flag <- 0
while (flag == 0) {
k <- create_chat_completion(
model = model,
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
)
res <- strsplit(k$choices[,'message.content'],'\n')[[1]]
if (length(res)==length(id))
flag <- 1
}
names(res) <- names(input)[id]
res
},simplify = F)
unlist(allres)
}
}
gptcelltype(input=input, tissuename='human PBMC',openai_key=NA, model = 'gpt-4')
message = cat(paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.  \n', paste0(names(input), ':',unlist(input),collapse = '\n ')))
return(message)
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.  \n', paste0(names(input), ':',unlist(input),collapse = '\n '))
return(cat(message))
gptcelltype <- function(input, tissuename=NULL, openai_key, model='gpt-4', topgenenumber = 10) {
if (!is.na(openai_key)) Sys.setenv(OPENAI_API_KEY = openai_key)
if (class(input)=='list') {
input <- sapply(input,paste,collapse=',')
} else {
input <- tapply(input$gene,list(input$cluster),function(i) paste0(i[1:topgenenumber],collapse=','))
}
if (is.na(openai_key)){
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.  \n', paste0(names(input), ':',unlist(input),collapse = '\n '))
return(cat(message))
} else {
cutnum <- ceiling(length(input)/30)
if (cutnum > 1) {
cid <- as.numeric(cut(1:length(input),cutnum))
} else {
cid <- rep(1,length(input))
}
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
flag <- 0
while (flag == 0) {
k <- create_chat_completion(
model = model,
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
)
res <- strsplit(k$choices[,'message.content'],'\n')[[1]]
if (length(res)==length(id))
flag <- 1
}
names(res) <- names(input)[id]
res
},simplify = F)
unlist(allres)
}
}
gptcelltype(input=input, tissuename='human PBMC',openai_key=NA, model = 'gpt-4')
a <- gptcelltype(input=input, tissuename='human PBMC',openai_key=NA, model = 'gpt-4')
a
pring(message)
print(message)
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types. ',  "\\n", paste0(names(input), ':',unlist(input),collapse = "\\n"))
message
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types. ',  "\n", paste0(names(input), ':',unlist(input),collapse = "\n"))
message
cat(message)
return(message)
gptcelltype <- function(input, tissuename=NULL, openai_key, model='gpt-4', topgenenumber = 10) {
if (!is.na(openai_key)) Sys.setenv(OPENAI_API_KEY = openai_key)
if (class(input)=='list') {
input <- sapply(input,paste,collapse=',')
} else {
input <- tapply(input$gene,list(input$cluster),function(i) paste0(i[1:topgenenumber],collapse=','))
}
if (is.na(openai_key)){
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types. ',  "\n", paste0(names(input), ':',unlist(input),collapse = "\n"))
cat(message)
return(message)
} else {
cutnum <- ceiling(length(input)/30)
if (cutnum > 1) {
cid <- as.numeric(cut(1:length(input),cutnum))
} else {
cid <- rep(1,length(input))
}
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
flag <- 0
while (flag == 0) {
k <- create_chat_completion(
model = model,
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
)
res <- strsplit(k$choices[,'message.content'],'\n')[[1]]
if (length(res)==length(id))
flag <- 1
}
names(res) <- names(input)[id]
res
},simplify = F)
unlist(allres)
}
}
a <- gptcelltype(input=input, tissuename='human PBMC',openai_key=NA, model = 'gpt-4')
a
print(a)
cat(a)
library(Seurat)
library(Seurat)
data("pbmc_small")
all.markers <- FindAllMarkers(object = pbmc_small)
gptcelltype(all.markers, tissuename='human PBMC', openai_key=NA)
all.markers
str(all.markers)
gptcelltype(all.markers, tissuename='human PBMC', openai_key=NA)
gptcelltype <- function(input, tissuename=NULL, openai_key, model='gpt-4', topgenenumber = 10) {
if (!is.na(openai_key)) Sys.setenv(OPENAI_API_KEY = openai_key)
if (class(input)=='list') {
input <- sapply(input,paste,collapse=',')
} else {
input <- tapply(input$gene,list(input$cluster),function(i) paste0(i[1:topgenenumber],collapse=','))
}
if (is.na(openai_key)){
message = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types. ',  "\n", paste0(names(input), ':',unlist(input),collapse = "\n"))
return(message)
} else {
cutnum <- ceiling(length(input)/30)
if (cutnum > 1) {
cid <- as.numeric(cut(1:length(input),cutnum))
} else {
cid <- rep(1,length(input))
}
allres <- sapply(1:cutnum,function(i) {
id <- which(cid==i)
flag <- 0
while (flag == 0) {
k <- create_chat_completion(
model = model,
message = list(list("role" = "user", "content" = paste0('Identify cell types of ',tissuename,' cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.\n',paste(input[id],collapse = '\n'))))
)
res <- strsplit(k$choices[,'message.content'],'\n')[[1]]
if (length(res)==length(id))
flag <- 1
}
names(res) <- names(input)[id]
res
},simplify = F)
return(unlist(allres))
}
}
gptcelltype(all.markers, tissuename='human PBMC', openai_key=NA)
a <- gptcelltype(all.markers, tissuename='human PBMC', openai_key=NA)
cat(a)
string <- "Identify cell types of human PBMC cells using the following markers separately for each row. Only provide the cell type name. Do not show numbers before the name. Some can be a mixture of multiple cell types.  \\ngs1 : CD4,CD3D\\ngs2 : CD14\\ngs3 : CD4,CD3D\\ngs4 : CD14..."
string
print(string)
cat(string)
yourkey <- openai_key <- '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'
a <- gptcelltype(input=input, tissuename='human PBMC',openai_key=NA, model = 'gpt-4')
a
a <- gptcelltype(input=input, tissuename='human PBMC',openai_key=yourkey, model = 'gpt-4')
yourkey <- openai_key <- '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'
a <- gptcelltype(input=input, tissuename='human PBMC',openai_key=yourkey, model = 'gpt-4')
a
a <- gptcelltype(all.markers, tissuename='human PBMC', openai_key=NA)
a <- gptcelltype(all.markers, tissuename='human PBMC', openai_key=yourkey)
a
0.9*0.51
